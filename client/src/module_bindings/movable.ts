// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent, Identity } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { StdbVector2 } from "./stdb_vector_2";

export class Movable extends IDatabaseTable
{
	public static tableName = "Movable";
	public entityId: number;
	public location: StdbVector2;

	public static primaryKey: string | undefined = "entityId";

	constructor(entityId: number, location: StdbVector2) {
	super();
		this.entityId = entityId;
		this.location = location;
	}

	public static serialize(value: Movable): object {
		return [
		value.entityId, StdbVector2.serialize(value.location)
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("location", StdbVector2.getAlgebraicType()),
		]);
	}

	public static fromValue(value: AlgebraicValue): Movable
	{
		let productValue = value.asProductValue();
		let __entity_id = productValue.elements[0].asNumber();
		let __location = StdbVector2.fromValue(productValue.elements[1]);
		return new this(__entity_id, __location);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("Movable").count();
	}

	public static all(): Movable[]
	{
		return __SPACETIMEDB__.clientDB.getTable("Movable").getInstances() as unknown as Movable[];
	}

	public static filterByEntityId(value: number): Movable | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Movable").getInstances())
		{
			if (instance.entityId === value) {
				return instance;
			}
		}
		return null;
	}


	public static onInsert(callback: (value: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: Movable, newValue: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").onUpdate(callback);
	}

	public static onDelete(callback: (value: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: Movable, newValue: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: Movable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Movable").removeOnDelete(callback);
	}

}

export default Movable;

__SPACETIMEDB__.registerComponent("Movable", Movable);
