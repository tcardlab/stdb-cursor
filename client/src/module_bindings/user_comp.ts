// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent, Identity } from "@clockworklabs/spacetimedb-sdk";

export class UserComp extends IDatabaseTable
{
	public static tableName = "UserComp";
	public entityId: number;
	public identity: Identity;
	public online: boolean;

	public static primaryKey: string | undefined = "entityId";

	constructor(entityId: number, identity: Identity, online: boolean) {
	super();
		this.entityId = entityId;
		this.identity = identity;
		this.online = online;
	}

	public static serialize(value: UserComp): object {
		return [
		value.entityId, Array.from(value.identity.toUint8Array()), value.online
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("identity", AlgebraicType.createProductType([
			new ProductTypeElement("__identity_bytes", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		])),
			new ProductTypeElement("online", AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool)),
		]);
	}

	public static fromValue(value: AlgebraicValue): UserComp
	{
		let productValue = value.asProductValue();
		let __entity_id = productValue.elements[0].asNumber();
		let __identity = new Identity(productValue.elements[1].asProductValue().elements[0].asBytes());
		let __online = productValue.elements[2].asBoolean();
		return new this(__entity_id, __identity, __online);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("UserComp").count();
	}

	public static all(): UserComp[]
	{
		return __SPACETIMEDB__.clientDB.getTable("UserComp").getInstances() as unknown as UserComp[];
	}

	public static filterByEntityId(value: number): UserComp | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserComp").getInstances())
		{
			if (instance.entityId === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByIdentity(value: Identity): UserComp | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserComp").getInstances())
		{
			if (instance.identity.isEqual(value)) {
				return instance;
			}
		}
		return null;
	}

	public static filterByOnline(value: boolean): UserComp[]
	{
		let result: UserComp[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserComp").getInstances())
		{
			if (instance.online === value) {
				result.push(instance);
			}
		}
		return result;
	}


	public static onInsert(callback: (value: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: UserComp, newValue: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").onUpdate(callback);
	}

	public static onDelete(callback: (value: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: UserComp, newValue: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: UserComp, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserComp").removeOnDelete(callback);
	}

}

export default UserComp;

__SPACETIMEDB__.registerComponent("UserComp", UserComp);
